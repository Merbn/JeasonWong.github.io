<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[WoooongYuwei]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://jeasonwong.github.io/"/>
  <updated>2016-08-07T04:57:53.000Z</updated>
  <id>http://jeasonwong.github.io/</id>
  
  <author>
    <name><![CDATA[巴掌]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[手摸手教你写炫酷控件]]></title>
    <link href="http://jeasonwong.github.io/2016/08/07/%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E5%86%99%E7%82%AB%E9%85%B7%E6%8E%A7%E4%BB%B6/"/>
    <id>http://jeasonwong.github.io/2016/08/07/手摸手教你写炫酷控件/</id>
    <published>2016-08-07T04:57:53.000Z</published>
    <updated>2016-08-07T04:57:53.000Z</updated>
    <content type="html"><![CDATA[<p>话不多说，先上效果。</p>
<p><img src="http://i4.piimg.com/1070/a43444182f677b1d.gif" alt="图二福利"></p>
<p>这个效果是在即刻app上看到，觉得很不错，遂仿之。</p>
<p>先说下我的实现思路（以上方的图片滚动为例，下方的文字实现效果类似）：</p>
<ul>
<li>自定义ViewGroup</li>
<li>装载两个ImageView和一个阴影View</li>
<li>通过一定规律交替控制两个ImageView和它们的marginTop，在onLayout()中实现</li>
<li>marginTop的具体值由属性动画控制，不断调用requestLayout()</li>
</ul>
<p>接下来依次说明</p>
<p>###<strong>一、自定义ViewGroup</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//滑动状态</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_SMOOTHING = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//停止状态</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_STOP = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ViewGroup宽高</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> mWidth, mHeight;</span><br><span class="line"><span class="comment">//变化的marginTop值</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> mSmoothMarginTop;</span><br><span class="line"><span class="comment">//默认状态</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> mStatus = STATUS_STOP;</span><br><span class="line"><span class="comment">//滚动时间间隔</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> mDuration = <span class="number">500</span>;</span><br><span class="line"><span class="comment">//重复次数</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> mRepeatTimes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    mWidth = w;</span><br><span class="line">    mHeight = h;</span><br><span class="line">    mSmoothMarginTop = -h;</span><br><span class="line">    initView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 是否是奇数圈</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> 结果</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isOddCircle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mRepeatTimes % <span class="number">2</span> == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先了解下成员变量，其中最重要的一个就是mSmoothMarginTop，相信很多人都知道一个View的marginTop可以设为负数，这个负数可以给我们带来太多的方便。</p>
<p><img src="http://i1.piimg.com/1070/275930be6e9efb87.jpg" alt="pic0"></p>
<p>上图的图0就是我们展现在屏幕上的ImageView，图1则是屏幕外marginTop为-height的ImageView，这个一定要明白，接下来才好继续实现。</p>
<p>###<strong>二、装载两个ImageView和一个阴影View</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;String&gt; mImgList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> ImageView[] mImgs = <span class="keyword">new</span> ImageView[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">private</span> View mShadowView;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果没有内容，则不进行初始化操作</span></span><br><span class="line">    <span class="keyword">if</span> (mImgList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    removeAllViews();</span><br><span class="line"></span><br><span class="line">    MarginLayoutParams params = <span class="keyword">new</span> MarginLayoutParams(mWidth, mHeight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两个ImageView加载前两张图</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mImgs.length; i++) &#123;</span><br><span class="line">        mImgs[i] = <span class="keyword">new</span> ImageView(getContext());</span><br><span class="line">        addViewInLayout(mImgs[i], -<span class="number">1</span>, params, <span class="keyword">true</span>);</span><br><span class="line">        Glide.with(getContext()).load(getImgPath(i)).centerCrop().into(mImgs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建阴影View</span></span><br><span class="line">    mShadowView = <span class="keyword">new</span> View(getContext());</span><br><span class="line">    mShadowView.setBackgroundColor(Color.parseColor(<span class="string">"#60000000"</span>));</span><br><span class="line">    mShadowView.setAlpha(<span class="number">0</span>);</span><br><span class="line">    addViewInLayout(mShadowView, -<span class="number">1</span>, params, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取图片地址</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@param</span> position 位置</span><br><span class="line"> * <span class="doctag">@return</span>  图片地址</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getImgPath</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    position = position % mImgList.size();</span><br><span class="line">    <span class="keyword">return</span> mImgList.get(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>关键点说明：</strong></p>
<ul>
<li>MarginLayoutParams 为了之后方便取出margin值</li>
<li>addViewInLayout() 为了对requestLayout的绝对控制</li>
<li>getImgPath() 为了实现循环滚动</li>
</ul>
<p>这样一来，我们需要的View都已经创建好了。</p>
<p>###<strong>三、通过一定规律交替控制两个ImageView和它们的marginTop，在onLayout()中实现</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cCount = getChildCount();</span><br><span class="line">    MarginLayoutParams cParams;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cCount; i++) &#123;</span><br><span class="line">        View childView = getChildAt(i);</span><br><span class="line">        cParams = (MarginLayoutParams) childView.getLayoutParams();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cl = <span class="number">0</span>, ct = <span class="number">0</span>, cr, cb;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isOddCircle()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                cl = cParams.leftMargin;</span><br><span class="line">                ct = mSmoothMarginTop + mHeight;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                cl = cParams.leftMargin;</span><br><span class="line">                ct = mSmoothMarginTop;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                cl = cParams.leftMargin;</span><br><span class="line">                ct = mSmoothMarginTop + mHeight;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                cl = cParams.leftMargin;</span><br><span class="line">                ct = mSmoothMarginTop;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//控制shadowView</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">            cl = cParams.leftMargin;</span><br><span class="line">            ct = mSmoothMarginTop + mHeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cr = cl + mWidth;</span><br><span class="line">        cb = ct + mHeight;</span><br><span class="line">        childView.layout(cl, ct, cr, cb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上实现的就是不断的替换图1和图2谁上谁下，阴影和下方的图保持同步。</p>
<p>###<strong>四、marginTop的具体值由属性动画控制，不断调用requestLayout()</strong></p>
<p>先看基类ViewGroup</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 开启滑动</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startSmooth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mStatus != STATUS_STOP) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ValueAnimator animator = ValueAnimator.ofFloat(-mHeight, <span class="number">0</span>);</span><br><span class="line">    animator.setDuration(mDuration);</span><br><span class="line">    animator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line">    animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> marginTop = (<span class="keyword">float</span>) animation.getAnimatedValue();</span><br><span class="line">            mSmoothMarginTop = (<span class="keyword">int</span>) marginTop;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (marginTop == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                        mRepeatTimes++;</span><br><span class="line"></span><br><span class="line">                        mSmoothMarginTop = -mHeight;</span><br><span class="line"></span><br><span class="line">                        doAnimFinish();</span><br><span class="line"></span><br><span class="line">                        mStatus = STATUS_STOP;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                doAnim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    animator.start();</span><br><span class="line">    mStatus = STATUS_SMOOTHING;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动画结束</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doAnimFinish</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动画进行时</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doAnim</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>关键点说明：</strong></p>
<ul>
<li>属性动画控制着mSmoothMarginTop在[-mHeight, 0]中变化</li>
<li>每完成一圈，mRepeatTimes自增1</li>
</ul>
<p>再来看看Gallery实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doAnimFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isOddCircle()) &#123;</span><br><span class="line">        Glide.with(getContext()).load(getImgPath(mRepeatTimes + <span class="number">1</span>)).centerCrop().into(mImgs[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Glide.with(getContext()).load(getImgPath(mRepeatTimes + <span class="number">1</span>)).centerCrop().into(mImgs[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    mShadowView.setAlpha(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doAnim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mShadowView.setAlpha(((<span class="number">1</span> - (-mSmoothMarginTop) / (<span class="keyword">float</span>) mHeight)));</span><br><span class="line">    requestLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>关键点说明：</strong></p>
<ul>
<li>通过mSmoothMarginTop与mHeight的比值控制阴影View的透明度</li>
<li>每次动画完成时，下方的图（此时下方的图已经超出屏幕了，而上方图显示在屏幕内）需要加载第三张图，使用getImgPath()取出</li>
</ul>
<p><img src="http://i4.piimg.com/1070/77799de59b06330d.jpg" alt="pic1"></p>
<p><strong>以上就是图片的滚动实现，文字的滚动90%是一样的，有点区别的就是需要文字需要控制下垂直居中，我就不赘述了</strong></p>
<blockquote>
<p>如果有更好的思路，欢迎交流，开源本身就是大家互相喷喷，互相进步嘛，<br>对各种动画感兴趣的朋友欢迎加群479729938进行交流，<br>期待各种好看，好玩，实用的动画~</p>
</blockquote>
<p><img src="http://i1.piimg.com/1070/f101a594f7ce04b6.png" alt="Markdown"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>话不多说，先上效果。</p>
<p><img src="http://i4.piimg.com/1070/a43444182f677b1d.gif" alt="图二福利"></p>
<p>这个效果是在即刻app上看到，觉得很不错，遂仿之。</p>
<p>先说下我的实现思路（]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些不错的Android相关导图]]></title>
    <link href="http://jeasonwong.github.io/2016/05/12/%E4%B8%80%E4%BA%9B%E4%B8%8D%E9%94%99%E7%9A%84Android%E7%9B%B8%E5%85%B3%E5%AF%BC%E5%9B%BE/"/>
    <id>http://jeasonwong.github.io/2016/05/12/一些不错的Android相关导图/</id>
    <published>2016-05-12T03:01:34.000Z</published>
    <updated>2016-05-12T03:01:34.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>View的手势</li>
</ul>
<p><img src="http://i2.buimg.com/88d558d78d5f6716.jpg" alt=""></p>
<p>原文地址：<a href="http://blog.csdn.net/fisher0113/article/details/51348535" target="_blank" rel="external">http://blog.csdn.net/fisher0113/article/details/51348535</a></p>
<ul>
<li>View的坐标系</li>
</ul>
<p><img src="http://i2.buimg.com/5ce15b91eb13fbec.jpg" alt=""></p>
<p>原文地址：<a href="https://github.com/JunWeiUp/view/blob/master/view%E5%9D%90%E6%A0%87%E7%B3%BB(%E4%B8%80).md" target="_blank" rel="external">https://github.com/JunWeiUp/view/blob/master/view%E5%9D%90%E6%A0%87%E7%B3%BB(%E4%B8%80).md</a></p>
<ul>
<li>线程状态转换</li>
</ul>
<p><img src="http://i4.buimg.com/ff4aa08311ce2bf1.png" alt=""></p>
<p>原文地址：<a href="http://www.jianshu.com/p/40d4c7aebd66" target="_blank" rel="external">http://www.jianshu.com/p/40d4c7aebd66</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>View的手势</li>
</ul>
<p><img src="http://i2.buimg.com/88d558d78d5f6716.jpg" alt=""></p>
<p>原文地址：<a href="http://blog.csdn.net/fisher0]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[app从一开始就不容忽视的事情]]></title>
    <link href="http://jeasonwong.github.io/2016/05/10/app%E4%BB%8E%E4%B8%80%E5%BC%80%E5%A7%8B%E5%B0%B1%E4%B8%8D%E5%AE%B9%E5%BF%BD%E8%A7%86%E7%9A%84%E4%B8%9A%E5%8A%A1/"/>
    <id>http://jeasonwong.github.io/2016/05/10/app从一开始就不容忽视的业务/</id>
    <published>2016-05-10T07:36:10.000Z</published>
    <updated>2016-05-23T04:10:13.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p>强制更新</p>
</li>
<li><p>对已发推送的回撤操作</p>
</li>
<li><p>增加CheckStyle检测代码规范</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;checkstyle&#39;&#10;&#10;    checkstyle &#123;&#10;        toolVersion &#39;6.1.1&#39;&#10;        showViolations true&#10;    &#125;&#10;&#10;    task checkstyle(type: Checkstyle) &#123;&#10;        source &#39;src&#39;&#10;        include &#39;**/*.java&#39;&#10;        exclude &#39;**/gen/**&#39;&#10;        ignoreFailures false&#10;        configFile new File(rootDir, &#34;checkstyle.xml&#34;)&#10;        // empty classpath&#10;        classpath = files()&#10;    &#125;</span><br></pre></td></tr></table></figure>
<p>华为CheckStyle =&gt; <a href="https://gist.github.com/ownwell/c32878440216f1866842" target="_blank" rel="external">https://gist.github.com/ownwell/c32878440216f1866842</a></p>
<p>有想到再继续补充</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p>强制更新</p>
</li>
<li><p>对已发推送的回撤操作</p>
</li>
<li><p>增加CheckStyle检测代码规范</p>
</li>
</ul>
<figure class="highlight"><table><tr><td cl]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[app推送消息发错后该如何处理]]></title>
    <link href="http://jeasonwong.github.io/2016/01/24/app%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF%E5%8F%91%E9%94%99%E5%90%8E%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/"/>
    <id>http://jeasonwong.github.io/2016/01/24/app推送消息发错后该如何处理/</id>
    <published>2016-01-24T13:15:46.000Z</published>
    <updated>2016-01-24T13:15:46.000Z</updated>
    <content type="html"><![CDATA[<p>昨天我司有个管理员帐号被盗，导致被不法分子恶意发了多条推送，针对此次事故，给大家带来了深刻的教训，那么app端对这种情况应该做怎样的处理呢？</p>
<h3>1、针对已经送达到用户手机的推送</h3>

<p>Android自带的NotificationManager是可以对通知栏进行接管的，以下代码可以清掉通知栏内有关该app的推送消息。</p>
<pre><code>String ns = Context.NOTIFICATION_SERVICE<span class="comment">;</span>
NotificationManager mNotificationManager<span class="comment">;</span>
mNotificationManager = (NotificationManager) context.getSystemService(ns)<span class="comment">;</span>
mNotificationManager.cancelAll()<span class="comment">;</span>
</code></pre><p>那么问题来了，这段代码又该在什么时候触发呢？</p>
<p>我司接的推送系统是友盟推送，该推送系统提供【自定义消息】的推送，那么只需要使用自定义消息对app再次进行推送即可告知app删除掉之前留在通知栏内的推送消息了。</p>
<p><code>Tips</code>：<font color="red"><em>通知</em></font>是指发送后会在系统通知栏收到展现，同时响铃或振动提醒用户。<font color="red"><em>自定义消息</em></font>是指发送后不会在系统通知栏展现，消息传到应用后需要开发者写展现代码才能看到。 自定义消息不对该消息进行展示和提醒，消息内容全部都传递给应用处理。</p>
<h3>2、针对未送达到用户手机的推送</h3>

<p>该类用户手机有可能处于关机、网络不稳定或者消息仍处于未发出的队列中等情况，此时需要将推送后台的消息全部撤回。</p>
<p><strong>以上两点仅是对已发出的错误推送进行相关补救办法，根本上还是应该对推送系统进行有效的管理，另外很多第三方推送系统并没有清除已送达到通知栏的推送消息的功能，希望后续接入。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天我司有个管理员帐号被盗，导致被不法分子恶意发了多条推送，针对此次事故，给大家带来了深刻的教训，那么app端对这种情况应该做怎样的处理呢？</p>
<h3>1、针对已经送达到用户手机的推送</h3>

<p>Android自带的NotificationManager是可以]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[解析特殊结构的JSON]]></title>
    <link href="http://jeasonwong.github.io/2015/10/17/%E8%A7%A3%E6%9E%90%E7%89%B9%E6%AE%8A%E7%BB%93%E6%9E%84%E7%9A%84JSON/"/>
    <id>http://jeasonwong.github.io/2015/10/17/解析特殊结构的JSON/</id>
    <published>2015-10-16T16:52:14.000Z</published>
    <updated>2015-09-11T12:51:54.000Z</updated>
    <content type="html"><![CDATA[<p>一般来说JSON的Key是已知的，如下所示：</p>
<pre><code>{
    "<span class="attribute">results</span>": <span class="value">[
           {
            "<span class="attribute">id</span>": <span class="value"><span class="number">1</span></span>,
            "<span class="attribute">name</span>": <span class="value"><span class="string">"wangyuwei"</span></span>,
            "<span class="attribute">sexuality</span>": <span class="value"><span class="string">"male"</span>
        </span>},
        {
            "<span class="attribute">id</span>": <span class="value"><span class="number">2</span></span>,
            "<span class="attribute">name</span>": <span class="value"><span class="string">"JeasonWong"</span></span>,
            "<span class="attribute">sexuality</span>": <span class="value"><span class="string">"female"</span>
        </span>}
    ]
</span>}
</code></pre><p>这样的JSON太容易解析了，但是有性能上的缺点，比如”id”,”name”,”sexuality”这些Key一直重复出现，一定程度上成为了冗余数据，那么问题来了，如何解决呢？参考以下JSON格式。</p>
<pre><code>{
    data: {
        snapshot: {
            fields: [
                <span class="string">"open_px"</span>,
                <span class="string">"high_px"</span>,
                <span class="string">"low_px"</span>
            ],
            <span class="number">600570.</span>SS: [
                <span class="number">47.08</span>,
                <span class="number">48.38</span>,
                <span class="number">45.88</span>
            ],
            <span class="number">000001.</span>SZ: [
                <span class="number">11.02</span>,
                <span class="number">11.12</span>,
                <span class="number">10.88</span>
            ]
        }
    }
}
</code></pre><p>这种JSON格式并不是很常见，但是我认为性能确实很强悍的。没有多余的Key，除了”fields”外，其余的Key都不是事先知道的，而”fields”里的Value确是与”fields”同级Key的Value一一对应，成为这些Value的Key。多么好的一个想法！</p>
<p>那么问题来了，对于这种未知Key的JSON数组我们该如何下手呢？</p>
<p>虽然不知道Key，但我们可以使用Iterator遍历一遍就行了。</p>
<pre><code><span class="keyword">JSONObject</span> jsonObj = <span class="keyword">new</span> <span class="keyword">JSONObject</span>(json).getJSONObject(<span class="string">"data"</span>).getJSONObject(<span class="string">"snapshot"</span>);
Iterator keyIter = jsonObj.keys();
</code></pre><p>这样一来，所有的Key都拿到了，但这个时候我们只拿到了最外层的Key，即”fields”,”600570.SS”,”000001.SZ”，而”fileds”里的Value还没取出，这些Value即将作为”600570.SS”,”000001.SZ”中Value的Key了（前面已经说了，又啰嗦一遍:)）</p>
<pre><code>List <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList();
JSONArray fields = jsonObj.getJSONArray(<span class="string">"fields"</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length(); i++) {
    <span class="built_in">list</span>.add(i, fields.getString(i));
}
</code></pre><p>现在”fields”中的Value全都取出来放到了list里。接着就是遍历刚才的keyIter了。</p>
<pre><code><span class="keyword">while</span> (keyIter.hasNext()) {
    <span class="keyword">String</span> keys = (<span class="keyword">String</span>) keyIter.next();
    <span class="keyword">JSONArray</span> jsonArray = jsonObj.getJSONArray(keys);
    Map <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>();
    <span class="keyword">if</span> (keys.equals(<span class="string">"fields"</span>)) {
        <span class="keyword">continue</span>;
    } <span class="keyword">else</span> {
        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; jsonArray.length(); i++) {
            <span class="built_in">map</span>.put(list.<span class="built_in">get</span>(i), jsonArray.<span class="built_in">get</span>(i));
        }
        HSStockEntity hsStockEntity = <span class="keyword">new</span> HSStockEntity();
        hsStockEntity.setSymbol(keys);
        hsStockEntity.setOpen_px(Double.parseDouble(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"open_px"</span>).toString()));
        hsStockEntity.setHigh_px(Double.parseDouble(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"high_px"</span>).toString()));
        hsStockEntity.setLow_px(Double.parseDouble(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"low_px"</span>).toString()));
        listEntity.<span class="built_in">add</span>(hsStockEntity);
    }
}
</code></pre><p>从以上代码可以看到，我按照keyIter的顺序拿到”600570.SS”,”000001.SZ”中的Value，然后把他们放到了map里，map的Key是”fields”的Value，而map的Value则是”600570.SS”或”000001.SZ”对应的Value。</p>
<p>HSStockEntity我的一个Model，这样最后能把所有的hsStockEntity都放在listEntity的集合中了。</p>
<p>需要特别注意的一点是keyIter取到的Key并一定与你看到的顺序是一样的，也就是”fields”,”600570.SS”,”000001.SZ”三个的顺序是不一定的，那么假如你的JSON数据源必须要按照一定的顺序显示，那你就得需要自己写一下Comparator了。比如我这里对high_px进行降序排序，如果相等时根据symbol再排。</p>
<pre><code>System.setProperty(<span class="string">"java.util.Arrays.useLegacyMergeSort"</span>, <span class="string">"true"</span>);
Collections.sort(listEntity, <span class="keyword">new</span> Comparator&lt;HSStockEntity&gt;() {
    @<span class="function">Override
    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(HSStockEntity entity, HSStockEntity t1)</span> </span>{
        <span class="keyword">if</span> ((<span class="keyword">float</span>) entity.getHigh_px() - (<span class="keyword">float</span>) t1.getHigh_px() ==<span class="number">0</span>) {
            <span class="keyword">return</span> entity.getSymbol().compareTo(t1.getSymbol());
           } <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">float</span>) entity.getHigh_px() - (<span class="keyword">float</span>) t1.getHigh_px() &gt; <span class="number">0</span>) {;
           <span class="keyword">if</span> (isRise) <span class="keyword">return</span> -<span class="number">1</span>;
            <span class="keyword">return</span> <span class="number">1</span>;
         } <span class="keyword">else</span> {
              <span class="keyword">if</span> (isRise) <span class="keyword">return</span> <span class="number">1</span>;
                  <span class="keyword">return</span> -<span class="number">1</span>;
            }
        }
});
</code></pre><p>这样以来，对这种特殊结构的JSON解析就完成了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般来说JSON的Key是已知的，如下所示：</p>
<pre><code>{
    "<span class="attribute">results</span>": <span class="value">[
           {
            "<sp]]>
    </summary>
    
  </entry>
  
</feed>
